{"ast":null,"code":"var _jsxFileName = \"/media/shafaet/F/moodle2/CSE408Project/frontend/src/shared/components/FormElements/Input.js\";\n// import React, { useReducer, useEffect } from \"react\";\n// import { validate } from \"../../util/validators\";\n// import \"./Input.css\";\n// const inputReducer = (state, action) => {\n//   switch (action.type) {\n//     case \"CHANGE\":\n//       return {\n//         ...state,\n//         value: action.val,\n//         isValid: validate(action.val, action.validators),\n//       };\n//     case \"TOUCH\": {\n//       return {\n//         ...state,\n//         isTouched: true,\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// };\n// const Input = (props) => {\n//   const [inputState, dispatch] = useReducer(inputReducer, {\n//     value: props.initialValue || \"\",\n//     isTouched: false,\n//     isValid: props.initialValid || false,\n//   });\n//   const { id, onInput } = props;\n//   const { value, isValid } = inputState;\n//   useEffect(() => {\n//     onInput(id, value, isValid);\n//   }, [id, value, isValid, onInput]);\n//   const changeHandler = (event) => {\n//     dispatch({\n//       type: \"CHANGE\",\n//       val: event.target.value,\n//       validators: props.validators,\n//     });\n//   };\n//   const touchHandler = () => {\n//     dispatch({\n//       type: \"TOUCH\",\n//     });\n//   };\n//   let element;\n//   switch (props.element) {\n//     case \"input\":\n//       element = (\n//         <input\n//           id={props.id}\n//           type={props.type}\n//           placeholder={props.placeholder}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         />\n//       );\n//       break;\n//     case \"textarea\":\n//       element = (\n//         <textarea\n//           id={props.id}\n//           rows={props.rows || 3}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         />\n//       );\n//       break;\n//     case \"select\":\n//       element = (\n//         <select\n//           id={props.id}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         >\n//           {props.options.map((option) => (\n//             <option key={option.value} value={option.value}>\n//               {option.text}\n//             </option>\n//           ))}\n//         </select>\n//       );\n//       break;\n//     case \"radio\":\n//       element = (\n//         <div>\n//           {props.options.map((option) => (\n//             <label key={option.value}>\n//               <input\n//                 type=\"radio\"\n//                 name={props.name}\n//                 value={option.value}\n//                 onChange={changeHandler}\n//                 onBlur={touchHandler}\n//                 checked={inputState.value === option.value}\n//               />\n//               {option.text}\n//             </label>\n//           ))}\n//         </div>\n//       );\n//       break;\n//     default:\n//       element = (\n//         <input\n//           id={props.id}\n//           type={props.type}\n//           placeholder={props.placeholder}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         />\n//       );\n//   }\n//   // const element =\n//   //   props.element === 'input' ? (\n//   //     <input\n//   //       id={props.id}\n//   //       type={props.type}\n//   //       placeholder={props.placeholder}\n//   //       onChange={changeHandler}\n//   //       onBlur={touchHandler}\n//   //       value={inputState.value}\n//   //     />\n//   //   ) : (\n//   //     <textarea\n//   //       id={props.id}\n//   //       rows={props.rows || 3}\n//   //       onChange={changeHandler}\n//   //       onBlur={touchHandler}\n//   //       value={inputState.value}\n//   //     />\n//   //   );\n//   return (\n//     <div\n//       className={`form-control ${\n//         !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n//       }`}\n//     >\n//       <label htmlFor={props.id}>{props.label}</label>\n//       {element} {/* {element} dite hobe jdi kaj na kore */}\n//       {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n//     </div>\n//   );\n// };\n// export default Input;\nimport React, { useReducer, useEffect } from \"react\";\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case \"TOUCH\":\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 39\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, \" \", props.label, \" \"), \" \", element, \" \", !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 126\n    }\n  }, \" \", props.errorText, \" \"), \" \");\n};\n\nexport default Input;","map":{"version":3,"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"sources":["/media/shafaet/F/moodle2/CSE408Project/frontend/src/shared/components/FormElements/Input.js"],"sourcesContent":["// import React, { useReducer, useEffect } from \"react\";\n\n// import { validate } from \"../../util/validators\";\n// import \"./Input.css\";\n\n// const inputReducer = (state, action) => {\n//   switch (action.type) {\n//     case \"CHANGE\":\n//       return {\n//         ...state,\n//         value: action.val,\n//         isValid: validate(action.val, action.validators),\n//       };\n//     case \"TOUCH\": {\n//       return {\n//         ...state,\n//         isTouched: true,\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// };\n\n// const Input = (props) => {\n//   const [inputState, dispatch] = useReducer(inputReducer, {\n//     value: props.initialValue || \"\",\n//     isTouched: false,\n//     isValid: props.initialValid || false,\n//   });\n\n//   const { id, onInput } = props;\n//   const { value, isValid } = inputState;\n\n//   useEffect(() => {\n//     onInput(id, value, isValid);\n//   }, [id, value, isValid, onInput]);\n\n//   const changeHandler = (event) => {\n//     dispatch({\n//       type: \"CHANGE\",\n//       val: event.target.value,\n//       validators: props.validators,\n//     });\n//   };\n\n//   const touchHandler = () => {\n//     dispatch({\n//       type: \"TOUCH\",\n//     });\n//   };\n//   let element;\n//   switch (props.element) {\n//     case \"input\":\n//       element = (\n//         <input\n//           id={props.id}\n//           type={props.type}\n//           placeholder={props.placeholder}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         />\n//       );\n//       break;\n//     case \"textarea\":\n//       element = (\n//         <textarea\n//           id={props.id}\n//           rows={props.rows || 3}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         />\n//       );\n//       break;\n//     case \"select\":\n//       element = (\n//         <select\n//           id={props.id}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         >\n//           {props.options.map((option) => (\n//             <option key={option.value} value={option.value}>\n//               {option.text}\n//             </option>\n//           ))}\n//         </select>\n//       );\n//       break;\n//     case \"radio\":\n//       element = (\n//         <div>\n//           {props.options.map((option) => (\n//             <label key={option.value}>\n//               <input\n//                 type=\"radio\"\n//                 name={props.name}\n//                 value={option.value}\n//                 onChange={changeHandler}\n//                 onBlur={touchHandler}\n//                 checked={inputState.value === option.value}\n//               />\n//               {option.text}\n//             </label>\n//           ))}\n//         </div>\n//       );\n//       break;\n\n//     default:\n//       element = (\n//         <input\n//           id={props.id}\n//           type={props.type}\n//           placeholder={props.placeholder}\n//           onChange={changeHandler}\n//           onBlur={touchHandler}\n//           value={inputState.value}\n//         />\n//       );\n//   }\n\n//   // const element =\n//   //   props.element === 'input' ? (\n//   //     <input\n//   //       id={props.id}\n//   //       type={props.type}\n//   //       placeholder={props.placeholder}\n//   //       onChange={changeHandler}\n//   //       onBlur={touchHandler}\n//   //       value={inputState.value}\n//   //     />\n//   //   ) : (\n//   //     <textarea\n//   //       id={props.id}\n//   //       rows={props.rows || 3}\n//   //       onChange={changeHandler}\n//   //       onBlur={touchHandler}\n//   //       value={inputState.value}\n//   //     />\n//   //   );\n\n//   return (\n//     <div\n//       className={`form-control ${\n//         !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n//       }`}\n//     >\n//       <label htmlFor={props.id}>{props.label}</label>\n//       {element} {/* {element} dite hobe jdi kaj na kore */}\n//       {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n//     </div>\n//   );\n// };\n\n// export default Input;\n\nimport React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n        case \"CHANGE\":\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators),\n            };\n        case \"TOUCH\":\n            {\n                return {\n                    ...state,\n                    isTouched: true,\n                };\n            }\n        default:\n            return state;\n    }\n};\n\nconst Input = (props) => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || \"\",\n        isTouched: false,\n        isValid: props.initialValid || false,\n    });\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid);\n    }, [id, value, isValid, onInput]);\n\n    const changeHandler = (event) => {\n        dispatch({\n            type: \"CHANGE\",\n            val: event.target.value,\n            validators: props.validators,\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: \"TOUCH\",\n        });\n    };\n\n    const element =\n        props.element === \"input\" ? ( <\n            input id = { props.id }\n            type = { props.type }\n            placeholder = { props.placeholder }\n            onChange = { changeHandler }\n            onBlur = { touchHandler }\n            value = { inputState.value }\n            />\n        ) : ( <\n            textarea id = { props.id }\n            rows = { props.rows || 3 }\n            onChange = { changeHandler }\n            onBlur = { touchHandler }\n            value = { inputState.value }\n            />\n        );\n\n    return ( <\n        div className = { `form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }` } >\n        <\n        label htmlFor = { props.id } > { props.label } < /label> { element } {!inputState.isValid && inputState.isTouched && < p > { props.errorText } < /p>} < /\n        div >\n    );\n};\n\nexport default Input;"],"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"},"metadata":{},"sourceType":"module"}
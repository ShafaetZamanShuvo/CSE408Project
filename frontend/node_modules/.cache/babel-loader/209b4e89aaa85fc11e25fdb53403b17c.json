{"ast":null,"code":"var _jsxFileName = \"/home/istiak/Desktop/Project Online/CSE408Project/frontend/src/sessions/pages/NewSession.js\";\nimport React, { useState, useContext } from \"react\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport \"./SessionForm.css\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst NewSession = () => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    sessionID: {\n      value: \"\",\n      isValid: false\n    },\n    startDate: {\n      value: \"\",\n      isValid: false\n    },\n    endDate: {\n      value: \"\",\n      isValid: false\n    } // courses: [\n    //   {\n    //     value: \"\",\n    //     isValid: true,\n    //   },\n    // ],\n\n  }, false);\n\n  const sessionSubmitHandler = async event => {\n    event.preventDefault(); // console.log(formState.inputs); // send this to the backend!\n\n    try {\n      // setIsLoading(true);\n      // const response = await fetch(\n      //   \"http://localhost:5000/api/admin/create-session\",\n      //   {\n      //     method: \"POST\",\n      //     headers: {\n      //       \"Content-Type\": \"application/json\",\n      //     },\n      //     body: JSON.stringify({\n      //       sessionID: formState.inputs.sessionID.value,\n      //       startDate: formState.inputs.startDate.value,\n      //       endDate: formState.inputs.endDate.value,\n      //       // courses: formState.inputs.courses.value,\n      //     }),\n      //   }\n      // );\n      // const responseData = await response.json();\n      // if (!response.ok) {\n      //   throw new Error(responseData.message);\n      // }\n      // console.log(responseData);\n      // setIsLoading(false);\n      await sendRequest(\"http://localhost:5000/api/admin/create-session\", \"POST\", JSON.stringify({\n        sessionID: formState.inputs.sessionID.value,\n        startDate: formState.inputs.startDate.value,\n        endDate: formState.inputs.endDate.value // courses: formState.inputs.courses.value,\n\n      }), {\n        \"Content-Type\": \"application/json\"\n      });\n    } catch (error) {// setIsLoading(false);\n      // setError(error.message || \"Something went wrong\");\n    }\n  }; // const errorHandler = () => {\n  //   setError(null);\n  // };\n  // const sessionSubmitHandler = (event) => {\n  //   event.preventDefault();\n  //   console.log(formState.inputs); // send this to the backend!\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear:\n    /*errorHandler*/\n    clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"session-form\",\n    onSubmit: sessionSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"sessionID\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Session ID\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid session id.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"startDate\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Start Date\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid start date.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"endDate\",\n    element: \"input\",\n    type: \"text\",\n    label: \"End Date\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid end date.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"ADD SESSION\")));\n};\n\nexport default NewSession;","map":{"version":3,"names":["React","useState","useContext","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","ErrorModal","LoadingSpinner","useHttpClient","NewSession","isLoading","error","sendRequest","clearError","formState","inputHandler","sessionID","value","isValid","startDate","endDate","sessionSubmitHandler","event","preventDefault","JSON","stringify","inputs"],"sources":["/home/istiak/Desktop/Project Online/CSE408Project/frontend/src/sessions/pages/NewSession.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport \"./SessionForm.css\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst NewSession = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      sessionID: {\n        value: \"\",\n        isValid: false,\n      },\n      startDate: {\n        value: \"\",\n        isValid: false,\n      },\n      endDate: {\n        value: \"\",\n        isValid: false,\n      },\n      // courses: [\n      //   {\n      //     value: \"\",\n      //     isValid: true,\n      //   },\n      // ],\n    },\n    false\n  );\n\n  const sessionSubmitHandler = async (event) => {\n    event.preventDefault();\n    // console.log(formState.inputs); // send this to the backend!\n    try {\n      // setIsLoading(true);\n      // const response = await fetch(\n      //   \"http://localhost:5000/api/admin/create-session\",\n      //   {\n      //     method: \"POST\",\n      //     headers: {\n      //       \"Content-Type\": \"application/json\",\n      //     },\n      //     body: JSON.stringify({\n      //       sessionID: formState.inputs.sessionID.value,\n      //       startDate: formState.inputs.startDate.value,\n      //       endDate: formState.inputs.endDate.value,\n      //       // courses: formState.inputs.courses.value,\n      //     }),\n      //   }\n      // );\n\n      // const responseData = await response.json();\n      // if (!response.ok) {\n      //   throw new Error(responseData.message);\n      // }\n      // console.log(responseData);\n      // setIsLoading(false);\n\n      await sendRequest(\n        \"http://localhost:5000/api/admin/create-session\",\n        \"POST\",\n        JSON.stringify({\n          sessionID: formState.inputs.sessionID.value,\n          startDate: formState.inputs.startDate.value,\n          endDate: formState.inputs.endDate.value,\n          // courses: formState.inputs.courses.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n        }\n      );\n    } catch (error) {\n      // setIsLoading(false);\n      // setError(error.message || \"Something went wrong\");\n    }\n  };\n\n  // const errorHandler = () => {\n  //   setError(null);\n  // };\n\n  // const sessionSubmitHandler = (event) => {\n  //   event.preventDefault();\n  //   console.log(formState.inputs); // send this to the backend!\n  // };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={/*errorHandler*/ clearError} />\n      <form className=\"session-form\" onSubmit={sessionSubmitHandler}>\n        <Input\n          id=\"sessionID\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Session ID\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid session id.\"\n          onInput={inputHandler}\n        />\n\n        <Input\n          id=\"startDate\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Start Date\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid start date.\"\n          onInput={inputHandler}\n        />\n\n        <Input\n          id=\"endDate\"\n          element=\"input\"\n          type=\"text\"\n          label=\"End Date\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid end date.\"\n          onInput={inputHandler}\n        />\n\n        {/* <Input\n          id=\"courses\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Courses \"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid end date.\"\n          onInput={inputHandler}\n        /> */}\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD SESSION\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewSession;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,SACEC,iBADF,EAEEC,mBAFF,QAGO,8BAHP;AAIA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAO,mBAAP;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,aAAT,QAA8B,8BAA9B;;AAEA,MAAMC,UAAU,GAAG,MAAM;EACvB,MAAM;IAAEC,SAAF;IAAaC,KAAb;IAAoBC,WAApB;IAAiCC;EAAjC,IAAgDL,aAAa,EAAnE;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BV,OAAO,CACvC;IACEW,SAAS,EAAE;MACTC,KAAK,EAAE,EADE;MAETC,OAAO,EAAE;IAFA,CADb;IAKEC,SAAS,EAAE;MACTF,KAAK,EAAE,EADE;MAETC,OAAO,EAAE;IAFA,CALb;IASEE,OAAO,EAAE;MACPH,KAAK,EAAE,EADA;MAEPC,OAAO,EAAE;IAFF,CATX,CAaE;IACA;IACA;IACA;IACA;IACA;;EAlBF,CADuC,EAqBvC,KArBuC,CAAzC;;EAwBA,MAAMG,oBAAoB,GAAG,MAAOC,KAAP,IAAiB;IAC5CA,KAAK,CAACC,cAAN,GAD4C,CAE5C;;IACA,IAAI;MACF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MAEA,MAAMX,WAAW,CACf,gDADe,EAEf,MAFe,EAGfY,IAAI,CAACC,SAAL,CAAe;QACbT,SAAS,EAAEF,SAAS,CAACY,MAAV,CAAiBV,SAAjB,CAA2BC,KADzB;QAEbE,SAAS,EAAEL,SAAS,CAACY,MAAV,CAAiBP,SAAjB,CAA2BF,KAFzB;QAGbG,OAAO,EAAEN,SAAS,CAACY,MAAV,CAAiBN,OAAjB,CAAyBH,KAHrB,CAIb;;MAJa,CAAf,CAHe,EASf;QACE,gBAAgB;MADlB,CATe,CAAjB;IAaD,CAtCD,CAsCE,OAAON,KAAP,EAAc,CACd;MACA;IACD;EACF,CA7CD,CA1BuB,CAyEvB;EACA;EACA;EAEA;EACA;EACA;EACA;;;EAEA,oBACE,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,UAAD;IAAY,KAAK,EAAEA,KAAnB;IAA0B,OAAO;IAAE;IAAiBE,UAApD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,eAEE;IAAM,SAAS,EAAC,cAAhB;IAA+B,QAAQ,EAAEQ,oBAAzC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,KAAD;IACE,EAAE,EAAC,WADL;IAEE,OAAO,EAAC,OAFV;IAGE,IAAI,EAAC,MAHP;IAIE,KAAK,EAAC,YAJR;IAKE,UAAU,EAAE,CAAClB,iBAAiB,EAAlB,CALd;IAME,SAAS,EAAC,kCANZ;IAOE,OAAO,EAAEY,YAPX;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,eAWE,oBAAC,KAAD;IACE,EAAE,EAAC,WADL;IAEE,OAAO,EAAC,OAFV;IAGE,IAAI,EAAC,MAHP;IAIE,KAAK,EAAC,YAJR;IAKE,UAAU,EAAE,CAACZ,iBAAiB,EAAlB,CALd;IAME,SAAS,EAAC,kCANZ;IAOE,OAAO,EAAEY,YAPX;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAXF,eAqBE,oBAAC,KAAD;IACE,EAAE,EAAC,SADL;IAEE,OAAO,EAAC,OAFV;IAGE,IAAI,EAAC,MAHP;IAIE,KAAK,EAAC,UAJR;IAKE,UAAU,EAAE,CAACZ,iBAAiB,EAAlB,CALd;IAME,SAAS,EAAC,gCANZ;IAOE,OAAO,EAAEY,YAPX;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EArBF,eAwCE,oBAAC,MAAD;IAAQ,IAAI,EAAC,QAAb;IAAsB,QAAQ,EAAE,CAACD,SAAS,CAACI,OAA3C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBAxCF,CAFF,CADF;AAiDD,CAnID;;AAqIA,eAAeT,UAAf"},"metadata":{},"sourceType":"module"}